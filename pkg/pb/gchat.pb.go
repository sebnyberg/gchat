// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/pb/gchat.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChatMessage struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_41191c10035d7058, []int{0}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChatMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ChatSessionRequest struct {
	Message              *ChatMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChatSessionRequest) Reset()         { *m = ChatSessionRequest{} }
func (m *ChatSessionRequest) String() string { return proto.CompactTextString(m) }
func (*ChatSessionRequest) ProtoMessage()    {}
func (*ChatSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41191c10035d7058, []int{1}
}

func (m *ChatSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatSessionRequest.Unmarshal(m, b)
}
func (m *ChatSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatSessionRequest.Marshal(b, m, deterministic)
}
func (m *ChatSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSessionRequest.Merge(m, src)
}
func (m *ChatSessionRequest) XXX_Size() int {
	return xxx_messageInfo_ChatSessionRequest.Size(m)
}
func (m *ChatSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSessionRequest proto.InternalMessageInfo

func (m *ChatSessionRequest) GetMessage() *ChatMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type ChatSessionResponse struct {
	Message              *ChatMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChatSessionResponse) Reset()         { *m = ChatSessionResponse{} }
func (m *ChatSessionResponse) String() string { return proto.CompactTextString(m) }
func (*ChatSessionResponse) ProtoMessage()    {}
func (*ChatSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41191c10035d7058, []int{2}
}

func (m *ChatSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatSessionResponse.Unmarshal(m, b)
}
func (m *ChatSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatSessionResponse.Marshal(b, m, deterministic)
}
func (m *ChatSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatSessionResponse.Merge(m, src)
}
func (m *ChatSessionResponse) XXX_Size() int {
	return xxx_messageInfo_ChatSessionResponse.Size(m)
}
func (m *ChatSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChatSessionResponse proto.InternalMessageInfo

func (m *ChatSessionResponse) GetMessage() *ChatMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*ChatMessage)(nil), "gchat.ChatMessage")
	proto.RegisterType((*ChatSessionRequest)(nil), "gchat.ChatSessionRequest")
	proto.RegisterType((*ChatSessionResponse)(nil), "gchat.ChatSessionResponse")
}

func init() { proto.RegisterFile("pkg/pb/gchat.proto", fileDescriptor_41191c10035d7058) }

var fileDescriptor_41191c10035d7058 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xc8, 0x4e, 0xd7,
	0x2f, 0x48, 0xd2, 0x4f, 0x4f, 0xce, 0x48, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x73, 0x94, 0x9c, 0xb9, 0xb8, 0x9d, 0x33, 0x12, 0x4b, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3,
	0x53, 0x85, 0xa4, 0xb8, 0x38, 0x4a, 0x8b, 0x53, 0x8b, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xfc, 0xbc, 0x92, 0xd4, 0xbc,
	0x12, 0x09, 0x26, 0xb0, 0x14, 0x8c, 0xab, 0xe4, 0xc4, 0x25, 0x04, 0x32, 0x24, 0x38, 0xb5, 0xb8,
	0x38, 0x33, 0x3f, 0x2f, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x87, 0x8b, 0x3d, 0x17,
	0x62, 0x2c, 0xd8, 0x28, 0x6e, 0x23, 0x21, 0x3d, 0x88, 0x03, 0x90, 0x2c, 0x0c, 0x82, 0x29, 0x51,
	0x72, 0xe6, 0x12, 0x46, 0x31, 0xa3, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x95, 0x34, 0x43, 0x8c, 0x22,
	0x21, 0xbe, 0x09, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0x82, 0x71, 0xc1, 0x66, 0x0a,
	0x49, 0x22, 0x69, 0x45, 0x75, 0xab, 0x94, 0x14, 0x36, 0x29, 0x88, 0x13, 0x94, 0x18, 0x34, 0x18,
	0x0d, 0x18, 0x9d, 0x58, 0xa2, 0x98, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0x81, 0x67, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xdb, 0xb6, 0xe2, 0xcc, 0x52, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	ChatSession(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatSessionClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ChatSession(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/gchat.ChatService/ChatSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatSessionClient{stream}
	return x, nil
}

type ChatService_ChatSessionClient interface {
	Send(*ChatSessionRequest) error
	Recv() (*ChatSessionResponse, error)
	grpc.ClientStream
}

type chatServiceChatSessionClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatSessionClient) Send(m *ChatSessionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatSessionClient) Recv() (*ChatSessionResponse, error) {
	m := new(ChatSessionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	ChatSession(ChatService_ChatSessionServer) error
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) ChatSession(srv ChatService_ChatSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatSession not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_ChatSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ChatSession(&chatServiceChatSessionServer{stream})
}

type ChatService_ChatSessionServer interface {
	Send(*ChatSessionResponse) error
	Recv() (*ChatSessionRequest, error)
	grpc.ServerStream
}

type chatServiceChatSessionServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatSessionServer) Send(m *ChatSessionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatSessionServer) Recv() (*ChatSessionRequest, error) {
	m := new(ChatSessionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gchat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatSession",
			Handler:       _ChatService_ChatSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/pb/gchat.proto",
}
